"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # For development: prints emails to console
PASSWORD_RESET_CONFIRM_URL = 'http://localhost:3000/reset-password-confirm/{uid}/{token}/'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z8(3r#w1fkl7j#vz6m=^i0rs@10q=x0d5z2dh*9-rxsqvs@h!q'

# SECRET_KEY='your_super_secret_flask_key_CHANGE_ME'
JWT_SECRET_KEY='your_jwt_secret_key_CHANGE_ME_TOO'
DATABASE_URL='sqlite:///site.db' # Or your PostgreSQL/MySQL connection string

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders', # Add this
    'rest_framework', # Add this
    'users',
    'djoser',
    'portfolios',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Add this here, before CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # Your React frontend
]

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Example
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),   # Example
    # ... other JWT settings ...
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Default to protected unless specified
    )
}

# Djoser settings
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': 'http://localhost:3000/reset-password-confirm/{uid}/{token}', # Important! Frontend URL
    'USERNAME_RESET_CONFIRM_URL': 'http://localhost:3000/username-reset-confirm/{uid}/{token}', # Optional
    'ACTIVATION_URL': 'http://localhost:3000/activate/{uid}/{token}', # Optional: for email verification
    'SEND_ACTIVATION_EMAIL': False, # Set to True if you want email verification on registration
    'SEND_PASSWORD_RESET_EMAIL': True, # Ensure this is True
    'PASSWORD_RESET_EMAIL_CONFIRMATION': False, # Set to True to require confirmation before sending email
    'TOKEN_MODEL': None, # We are using JWT, so no token model needed.
    'SERIALIZERS': {
        'user_create': 'users.serializers.RegisterSerializer', # Use your custom registration serializer
        'user': 'users.serializers.MyUserSerializer', # Create a simple user serializer later
        'current_user': 'users.serializers.MyUserSerializer',
        'password_reset_confirm': 'djoser.serializers.PasswordResetConfirmSerializer',
    },
    'EMAIL': {
        'password_reset': 'djoser.email.PasswordResetEmail', # Default, but good to know
    }
}

# ... (Email settings - keep the console backend for development) ...
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'